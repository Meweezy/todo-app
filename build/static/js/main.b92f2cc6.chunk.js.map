{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","className","data-id","id","title","value","onClick","deleteTodo","App","useState","input","setInput","todos","setTodos","scaleIn","setScaleIn","docData","setDocData","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","e","preventDefault","index","target","delete","onChange","type","disabled","console","log","add","TransitionGroup","todo","CSSTransition","in","timeout","classNames","unmountOnExit","key","uuidv4","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAeeA,E,OAbKC,EAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YCURC,G,YAlBF,SAACC,GACZ,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,0BAAMC,UAASF,EAAMG,IAAKH,EAAMI,QAGlC,4BACEC,MAAOL,EAAMK,MACbC,QAASN,EAAMO,WACfN,UAAU,iB,wBC0FHO,MAlGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIiBN,mBAAS,IAJ1B,mBAINO,EAJM,KAIGC,EAJH,KAMbC,qBAAU,WACR/B,EAAGgC,WAAW,SAASC,YAAW,SAACC,GACjCJ,EACEI,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CAAErB,GAAIqB,EAAIrB,GAAIsB,KAAMD,EAAIC,YAEtDZ,EAASQ,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,OAAOrB,UAC/CW,GAAW,QAEZ,IAIH,IAAMR,EAAa,SAACmB,GAClBA,EAAEC,iBACF,IAAIC,EAAQF,EAAEG,OAAOxB,MAWrBlB,EAAGgC,WAAW,SAASK,IAAIR,EAAQY,GAAOzB,IAAI2B,UAmBhD,OACE,yBAAK3B,GAAG,sBAAsBF,UAAU,OACtC,wCACA,0BAAMA,UAAU,eACd,2BACEA,UAAU,0BACVI,MAAOK,EACPqB,SAAU,SAACL,GAAD,OAAOf,EAASe,EAAEG,OAAOxB,QACnC2B,KAAK,SAEP,4BACE/B,UAAU,SACVgC,UAAWvB,EACXsB,KAAK,SACL1B,QA9BQ,SAACoB,GACfA,EAAEC,iBACFO,QAAQC,IAAI,SAAUzB,GAItBvB,EAAGgC,WAAW,SAASiB,IAAI,CACzBhC,MAAOM,IAETC,EAAS,IAETuB,QAAQC,IAAIrB,GAEZoB,QAAQC,IAAR,sBAAgBvB,GAAhB,CAAuBF,OAanB,aASF,kBAAC2B,EAAA,EAAD,KACE,yBAAKpC,UAAU,gBACZW,EAAMW,KAAI,SAACe,EAAMV,GAAP,OACT,kBAACW,EAAA,EAAD,CACEC,GAAI1B,EACJ2B,QAAS,IACTC,WAAW,UAEXC,eAAa,GAOb,kBAAC,EAAD,CACEvC,MAAOkC,EACPjC,MAAOuB,EACPgB,IAAKC,cACLtC,WAAYA,Y,MCnFRuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.b92f2cc6.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyChauZk7o7elT-_QSSe11jui8mmxX-OWco\",\n  authDomain: \"todo-app-44e65.firebaseapp.com\",\n  databaseURL: \"https://todo-app-44e65.firebaseio.com\",\n  projectId: \"todo-app-44e65\",\n  storageBucket: \"todo-app-44e65.appspot.com\",\n  messagingSenderId: \"432765067293\",\n  appId: \"1:432765067293:web:296b90f58b57e61293e6f4\",\n  measurementId: \"G-LB5WBYC0L2\",\n});\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState } from \"react\";\nimport \"./Todo.css\";\n// import { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Todo = (props) => {\n  return (\n    <div className=\"todo\">\n      <div className=\"todo-span\">\n        <span data-id={props.id}>{props.title}</span>\n      </div>\n\n      <button\n        value={props.value}\n        onClick={props.deleteTodo}\n        className=\"deleteBtn\"\n      >\n        {/* <FontAwesomeIcon className=\"deleteIcon\" icon={faTrashAlt} /> */}\n      </button>\n    </div>\n  );\n};\n\nexport default Todo; //let this be reusable\n","import React, { useState, useEffect } from \"react\";\nimport db from \"./firebase\";\nimport \"./App.css\";\nimport Todo from \"./Todo\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [scaleIn, setScaleIn] = useState(false);\n  const [docData, setDocData] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"todos\").onSnapshot((snapshot) => {\n      setDocData(\n        snapshot.docs.map((doc) => ({ id: doc.id, data: doc.data() }))\n      );\n      setTodos(snapshot.docs.map((doc) => doc.data().title));\n      setScaleIn(true);\n    });\n  }, []);\n\n  // console.log(docData[0]);\n\n  const deleteTodo = (e) => {\n    e.preventDefault();\n    let index = e.target.value;\n    // db.collection(\"todos\")\n    // .where(\"title\", \"==\", todos[index])\n    //   .get()\n    //   .then(function (querySnapshot) {\n    //     querySnapshot.forEach(function (doc) {\n    //       // console.log(doc);\n    //       db.collection(\"todos\").doc(doc.id).delete();\n    //     });\n    //   });\n    // console.log(docData[index].id);\n    db.collection(\"todos\").doc(docData[index].id).delete();\n  };\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    console.log(\"BOOM >\", input);\n\n    //add what is in iput to the todos array\n    //clear the input field\n    db.collection(\"todos\").add({\n      title: input,\n    });\n    setInput(\"\");\n    // setScaleIn(true);\n    console.log(scaleIn);\n\n    console.log([...todos, input]);\n  };\n\n  return (\n    <div id=\"bootstrap-overrides\" className=\"App\">\n      <h1>Todo App</h1>\n      <form className=\"form-inline\">\n        <input\n          className=\"form-control todo-input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          type=\"text\"\n        ></input>\n        <button\n          className=\"addBtn\"\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n        >\n          ADD TODO\n        </button>\n      </form>\n      <TransitionGroup>\n        <div className=\"todo-wrapper\">\n          {todos.map((todo, index) => (\n            <CSSTransition\n              in={scaleIn}\n              timeout={300}\n              classNames=\"scaleIn\"\n              // key={uuidv4()}\n              unmountOnExit\n              // onEnter={() => setScaleIn(true)}\n              // onEntered={() => setScaleIn(true)}\n              // onExit={() => setScaleIn(false)}\n              // onExiting={() => setScaleIn(false)}\n              // onExited={() => setScaleIn(false)}\n            >\n              <Todo\n                title={todo}\n                value={index}\n                key={uuidv4()}\n                deleteTodo={deleteTodo}\n              ></Todo>\n            </CSSTransition>\n          ))}\n        </div>\n      </TransitionGroup>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}